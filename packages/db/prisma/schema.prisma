// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  encryptedId   String?        // Encrypted user ID for privacy
  encryptedEmail String?       // Encrypted email for privacy
  name          String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  messages      Message[]
  memories      ImportantMemory[]
  homeworks     HomeworkAssignment[]
  accounts      Account[]
  sessions      Session[]
}

// NextAuth Account model
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth Session model
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Conversation model
model Conversation {
  id        String      @id @default(uuid())
  title     String
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  memories  ImportantMemory[]
  homeworks HomeworkAssignment[]
}

// Message model
model Message {
  id             String       @id @default(uuid())
  conversationId String
  userId         String
  role           String // user, assistant, system
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Important memory model
model ImportantMemory {
  id             String       @id @default(uuid())
  userId         String
  conversationId String
  content        String       @db.Text
  category       String // trigger, coping, breakthrough, goal
  importance     Float
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

// Homework assignment model
model HomeworkAssignment {
  id             String       @id @default(uuid())
  userId         String
  conversationId String
  content        String       @db.Text
  status         String // assigned, in_progress, completed, skipped
  assignedAt     DateTime     @default(now())
  dueDate        DateTime?
  completedAt    DateTime?
  notes          String?      @db.Text
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
} 